/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/*! exports provided: StarfallGame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StarfallGame\", function() { return StarfallGame; });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _gameScene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gameScene */ \"./src/gameScene.ts\");\n/* harmony import */ var _gameNoFailScene__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gameNoFailScene */ \"./src/gameNoFailScene.ts\");\n/* harmony import */ var _scoreScene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scoreScene */ \"./src/scoreScene.ts\");\n/* harmony import */ var _gameplayChoiceScene__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gameplayChoiceScene */ \"./src/gameplayChoiceScene.ts\");\n/* harmony import */ var _objectChoiceScene__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./objectChoiceScene */ \"./src/objectChoiceScene.ts\");\n\n\n\n\n\n\nconst config = {\n    title: \"Runner\",\n    type: Phaser.AUTO,\n    width: 1334,\n    height: 750,\n    parent: \"game\",\n    scene: [_objectChoiceScene__WEBPACK_IMPORTED_MODULE_5__[\"ObjectChoiceScene\"], _gameplayChoiceScene__WEBPACK_IMPORTED_MODULE_4__[\"GameplayChoiceScene\"], _gameNoFailScene__WEBPACK_IMPORTED_MODULE_2__[\"GameNoFailScene\"], _gameScene__WEBPACK_IMPORTED_MODULE_1__[\"GameScene\"], _scoreScene__WEBPACK_IMPORTED_MODULE_3__[\"ScoreScene\"]],\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            debug: false\n        }\n    },\n    backgroundColor: \"#99badd\"\n};\nclass StarfallGame extends Phaser.Game {\n    constructor(config) {\n        super(config);\n    }\n}\nwindow.onload = () => {\n    var game = new StarfallGame(config);\n};\n\n\n//# sourceURL=webpack:///./src/app.ts?");

/***/ }),

/***/ "./src/base.ts":
/*!*********************!*\
  !*** ./src/base.ts ***!
  \*********************/
/*! exports provided: SwitchBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SwitchBase\", function() { return SwitchBase; });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ \"./src/settings.ts\");\n\n\nclass SwitchBase extends Phaser.Scene {\n    constructor(args) {\n        super(args);\n        this.waiting = false; // true when waiting for input\n    }\n    getUserInput(correct, func) {\n        this.waiting = true;\n        this.correct = correct;\n        this.callback = func;\n        if (_settings__WEBPACK_IMPORTED_MODULE_1__[\"default\"].mode == \"auto\") {\n            this.time.delayedCall(1000, () => {\n                this.returnInput(this.correct);\n            }, [], this);\n        }\n    }\n    returnInput(value) {\n        // ignore if not waiting\n        if (!this.waiting) {\n            return;\n        }\n        // display the choice\n        this.setSelected(value);\n        console.log(value);\n        // return the answer through the callback\n        this.callback(value);\n        // ignore input\n        this.waiting = false;\n    }\n    setSelected(choice) {\n        const choices = document.querySelectorAll(\"button.choice\");\n        let selected = document.querySelector(\"button.selected\");\n        if (selected) {\n            selected.classList.remove(\"selected\");\n        }\n        choices[choice].classList.add(\"selected\");\n    }\n    create(data) {\n        // bind left and right arrow for direct selection\n        this.input.keyboard.on(\"keydown-LEFT\", (e) => {\n            // pass response back to caller\n            this.returnInput(0);\n        });\n        this.input.keyboard.on(\"keydown-RIGHT\", (e) => {\n            // pass response back to caller\n            this.returnInput(1);\n        });\n        // bind the buttons for direct selection\n        document\n            .getElementById(\"left\")\n            .addEventListener(\"click\", e => this.returnInput(0));\n        document\n            .getElementById(\"right\")\n            .addEventListener(\"click\", e => this.returnInput(1));\n        // bind space for 2-switch mover\n        this.input.keyboard.on(\"keydown-SPACE\", (e) => {\n            const choices = document.querySelectorAll(\"button.choice\");\n            let selected = document.querySelector(\"button.selected\");\n            let i = 0;\n            if (selected) {\n                i = ([...choices].indexOf(selected) + 1) % choices.length;\n                selected.classList.remove(\"selected\");\n            }\n            choices[i].classList.add(\"selected\");\n        });\n        // bind enter for 2-switch chooser\n        this.input.keyboard.on(\"keydown-ENTER\", (e) => {\n            const selected = (document.querySelector(\"button.selected\"));\n            if (selected) {\n                selected.click();\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack:///./src/base.ts?");

/***/ }),

/***/ "./src/gameNoFailScene.ts":
/*!********************************!*\
  !*** ./src/gameNoFailScene.ts ***!
  \********************************/
/*! exports provided: GameNoFailScene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameNoFailScene\", function() { return GameNoFailScene; });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n\n// global game options\nlet gameOptions = {\n    platformStartSpeed: 350,\n    spawnRange: [100, 350],\n    platformSizeRange: [50, 250],\n    playerGravity: 900,\n    jumpForce: 400,\n    playerStartPosition: 200,\n    jumps: 2,\n    chosenObject: null,\n    map: { \"desserts\": [\"cookie\", \"cupcake\", \"icecream\", \"pie\", \"cake\"], \"sports\": [\"soccer\", \"tennis\", \"baseball\", \"basketball\", \"football\"], \"cheerleading\": [\"pompom1\", \"pompom2\", \"pompom3\", \"pompom4\", \"pompom5\", \"pompom6\"] }\n};\nclass GameNoFailScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: \"GameNoFailScene\"\n        });\n        this.playerJumps = 0;\n        this.nextPlatformDistance = 0;\n    }\n    // init(/*params: any*/): void { }\n    preload() {\n        this.load.image(\"platform\", \"assets/platform.png\");\n        this.load.image(\"player\", \"assets/player.png\");\n        this.load.image(\"cookie\", \"assets/cookie.png\");\n        this.load.image(\"cupcake\", \"assets/cupcake.png\");\n        this.load.image(\"pie\", \"assets/pie.png\");\n        this.load.image(\"cake\", \"assets/cake.png\");\n        this.load.image(\"icecream\", \"assets/icecream.png\");\n        this.load.image(\"soccer\", \"assets/soccer.png\");\n        this.load.image(\"tennis\", \"assets/tennis.png\");\n        this.load.image(\"baseball\", \"assets/baseball.png\");\n        this.load.image(\"basketball\", \"assets/basketball.png\");\n        this.load.image(\"football\", \"assets/football.png\");\n        this.load.image(\"pompom1\", \"assets/pompom1.png\");\n        this.load.image(\"pompom2\", \"assets/pompom2.png\");\n        this.load.image(\"pompom3\", \"assets/pompom3.png\");\n        this.load.image(\"pompom4\", \"assets/pompom4.png\");\n        this.load.image(\"pompom5\", \"assets/pompom5.png\");\n        this.load.image(\"pompom6\", \"assets/pompom6.png\");\n    }\n    printSceneInfo() {\n        console.log(\"is sleeping \" + this.scene.isSleeping());\n        console.log(\"is paused \" + this.scene.isPaused());\n        console.log(\"is visible \" + this.scene.isVisible());\n        console.log(\"is active \" + this.scene.isActive());\n    }\n    create(data) {\n        this.score = 0;\n        this.updateScore();\n        this.index = 0;\n        console.log(data);\n        switch (data) {\n            case \"desserts\":\n                gameOptions.chosenObject = gameOptions.map.desserts;\n                break;\n            case \"sports\":\n                gameOptions.chosenObject = gameOptions.map.sports;\n                break;\n            case \"cheerleading\":\n                gameOptions.chosenObject = gameOptions.map.cheerleading;\n        }\n        console.log(gameOptions.chosenObject);\n        this.createButtons();\n        this.platformGroup = this.add.group({\n            removeCallback: platform => this.platformPool.add(platform)\n        });\n        this.platformPool = this.add.group({\n            removeCallback: platform => this.platformGroup.add(platform)\n        });\n        this.chosenObjectGroup = this.add.group({\n            removeCallback: chosenObject => this.chosenObjectGroup.add(chosenObject)\n        });\n        this.chosenObjectPool = this.add.group({\n            removeCallback: chosenObject => this.chosenObjectGroup.add(chosenObject)\n        });\n        // adding a platform to the game, the arguments are platform width and x position\n        this.addPlatform(+this.game.config.width, +this.game.config.width / 2);\n        // adding a chosenObject to the game\n        this.addChosenObject(100, (+this.game.config.width * 2) / 3);\n        // adding the player;\n        this.player = this.physics.add.sprite(gameOptions.playerStartPosition, +this.game.config.height / 2, \"player\");\n        this.player.setGravityY(gameOptions.playerGravity);\n        // adding a chosenObject collider so chosenObject disappears upon collision with player\n        this.physics.add.collider(this.player, this.chosenObjectGroup, (player, chosenObject) => {\n            chosenObject.destroy();\n            this.score++;\n            this.updateScore();\n        });\n        // setting collisions between the player and the platform group\n        this.physics.add.collider(this.player, this.platformGroup);\n        // to do : disable input when scene isn't paused\n        document.addEventListener(\"keydown\", e => {\n            if (e.keyCode == 32 || e.key == \"Enter\") {\n                console.log(e.key);\n                this.dealWithInput(e.key);\n            }\n        });\n    }\n    getRandomElement(items) {\n        return items[Math.floor(Math.random() * items.length)];\n    }\n    createButtons() {\n        var selectedStyle = {\n            font: \"128px Arial Bold\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            fill: \"#99badd\",\n            backgroundColor: \"#FFFF33\"\n        };\n        var style = {\n            font: \"128px Arial Bold\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            fill: \"#99badd\",\n            backgroundColor: \"#fff\"\n        };\n        this.jumpButton = this.add.text(300, 350, \"Jump\", selectedStyle);\n        this.jumpButton.setVisible(false);\n        this.runButton = this.add.text(700, 350, \"Run\", style);\n        this.runButton.setVisible(false);\n    }\n    updateScore() {\n        var scoreBoardStyle = {\n            font: \"128px Arial Bold\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            fill: \"#99badd\",\n            backgroundColor: \"#fff\"\n        };\n        this.scoreBoard = this.add.text(500, 0, \"Score: \" + this.score, scoreBoardStyle);\n    }\n    dealWithInput(key) {\n        console.log(this.index);\n        if (this.scene.isPaused(\"GameNoFailScene\")) {\n            if (key == \"Enter\") {\n                //enter\n                if (this.index % 2 == 0) {\n                    this.resumeGameAndJump();\n                }\n                else {\n                    this.resumeGameAndRun();\n                }\n            }\n            else {\n                //space\n                this.dealWithButtons();\n            }\n        }\n    }\n    dealWithButtons() {\n        console.log(\"dealing with buttons \" + this.index);\n        if (this.index % 2 == 1) {\n            this.jumpButton.setBackgroundColor(\"#FFFF33\");\n            this.runButton.setBackgroundColor(\"#fff\");\n        }\n        else {\n            this.runButton.setBackgroundColor(\"#FFFF33\");\n            this.jumpButton.setBackgroundColor(\"#fff\");\n        }\n        this.index++;\n    }\n    resumeGameAndJump() {\n        this.scene.resume(\"GameNoFailScene\");\n        this.jump();\n        this.jumpButton.setVisible(false);\n        this.runButton.setVisible(false);\n    }\n    resumeGameAndRun() {\n        this.scene.resume(\"GameNoFailScene\");\n        this.jumpButton.setVisible(false);\n        this.runButton.setVisible(false);\n    }\n    playerNearChosenObject(chosenObject) {\n        return chosenObject.x - 200 > 0 && chosenObject.x - 200 < 3;\n    }\n    // the core of the script: platform are added from the pool or created on the fly\n    addPlatform(platformWidth, posX) {\n        let platform;\n        if (this.platformPool.getLength()) {\n            platform = this.platformPool.getFirst();\n            platform.x = posX;\n            platform.active = true;\n            platform.visible = true;\n            this.platformPool.remove(platform);\n        }\n        else {\n            platform = this.physics.add.sprite(posX, +this.game.config.height * 0.8, \"platform\");\n            platform.setImmovable(true);\n            platform.setVelocityX(gameOptions.platformStartSpeed * -1);\n            this.platformGroup.add(platform);\n        }\n        platform.displayWidth = platformWidth;\n        this.nextPlatformDistance = Phaser.Math.Between(gameOptions.spawnRange[0], gameOptions.spawnRange[1]);\n    }\n    addChosenObject(chosenObjectSize, posX) {\n        let chosenObject;\n        if (this.chosenObjectPool.getLength()) {\n            chosenObject = this.chosenObjectPool.getFirst();\n            chosenObject.x = posX;\n            chosenObject.active = true;\n            chosenObject.visible = true;\n            this.chosenObjectPool.remove(chosenObject);\n        }\n        else {\n            chosenObject = this.physics.add.sprite(posX, +this.game.config.height / 2, this.getRandomElement(gameOptions.chosenObject));\n            chosenObject.setImmovable(true);\n            chosenObject.setVelocityX(gameOptions.platformStartSpeed * -0.5);\n            this.chosenObjectGroup.add(chosenObject);\n        }\n        chosenObject.displayWidth = chosenObjectSize;\n        chosenObject.displayHeight = chosenObjectSize;\n    }\n    // // the player jumps when on the ground, or once in the air as long as there are jumps left \n    // and the first jump was on the ground\n    jump() {\n        if (this.player.body.touching.down ||\n            (this.playerJumps > 0 && this.playerJumps < gameOptions.jumps)) {\n            if (this.player.body.touching.down) {\n                this.playerJumps = 2;\n            }\n            this.player.setVelocityY(gameOptions.jumpForce * -1 * 2);\n            this.playerJumps++;\n        }\n    }\n    update() {\n        this.player.x = gameOptions.playerStartPosition;\n        // recycling chosenObjects\n        let minDistance = +this.game.config.width;\n        this.chosenObjectGroup\n            .getChildren()\n            .forEach(function (chosenObject) {\n            let chosenObjectDistance = +this.game.config.width - chosenObject.x - chosenObject.displayWidth / 2;\n            minDistance = Math.min(minDistance, chosenObjectDistance);\n            if (this.playerNearChosenObject(chosenObject)) {\n                this.jumpButton.setVisible(true);\n                this.runButton.setVisible(true);\n                this.scene.pause(\"GameNoFailScene\");\n            }\n        }, this);\n        //adding new chosenObjects\n        if (minDistance > this.nextPlatformDistance) {\n            var nextChosenObjectWidth = Phaser.Math.Between(gameOptions.platformSizeRange[0], gameOptions.platformSizeRange[1]);\n            this.addChosenObject(+nextChosenObjectWidth, +this.game.config.width + +this.game.config.width / 2);\n        }\n        //adding a platform\n        this.addPlatform(+this.game.config.width, +this.game.config.width + +this.game.config.width / 2);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/gameNoFailScene.ts?");

/***/ }),

/***/ "./src/gameScene.ts":
/*!**************************!*\
  !*** ./src/gameScene.ts ***!
  \**************************/
/*! exports provided: GameScene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameScene\", function() { return GameScene; });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ \"./src/base.ts\");\n\n\n// global game options\nlet gameOptions = {\n    platformStartSpeed: 350,\n    spawnRange: [100, 350],\n    platformSizeRange: [50, 250],\n    playerGravity: 900,\n    jumpForce: 400,\n    playerStartPosition: 200,\n    jumps: 2,\n    chosenObjects: null,\n    otherObjects: null,\n    map: { \"desserts\": [\"cookie\", \"cupcake\", \"icecream\", \"pie\", \"cake\"], \"sports\": [\"soccer\", \"tennis\", \"baseball\", \"basketball\", \"football\"], \"cheerleading\": [\"pompom1\", \"pompom2\", \"pompom3\", \"pompom4\", \"pompom5\", \"pompom6\"] },\n    objects: [\"cookie\", \"cupcake\", \"icecream\", \"pie\", \"cake\", \"soccer\", \"tennis\", \"baseball\", \"basketball\", \"football\", \"pompom1\", \"pompom2\", \"pompom3\", \"pompom4\", \"pompom5\", \"pompom6\"]\n};\nclass GameScene extends _base__WEBPACK_IMPORTED_MODULE_1__[\"SwitchBase\"] {\n    constructor() {\n        super({\n            key: \"GameScene\"\n        });\n        this.playerJumps = 0;\n        this.nextPlatformDistance = 0;\n    }\n    preload() {\n        this.load.image(\"platform\", \"assets/platform.png\");\n        this.load.spritesheet(\"player\", 'assets/sprite_sheets/girl-spritesheet.png', {\n            frameWidth: 69,\n            frameHeight: 90,\n            startFrame: 0,\n            endFrame: 11\n        });\n        this.load.image(\"cookie\", \"assets/cookie.png\");\n        this.load.image(\"cupcake\", \"assets/cupcake.png\");\n        this.load.image(\"pie\", \"assets/pie.png\");\n        this.load.image(\"cake\", \"assets/cake.png\");\n        this.load.image(\"icecream\", \"assets/icecream.png\");\n        this.load.image(\"soccer\", \"assets/soccer.png\");\n        this.load.image(\"tennis\", \"assets/tennis.png\");\n        this.load.image(\"baseball\", \"assets/baseball.png\");\n        this.load.image(\"basketball\", \"assets/basketball.png\");\n        this.load.image(\"football\", \"assets/football.png\");\n        this.load.image(\"pompom1\", \"assets/pompom1.png\");\n        this.load.image(\"pompom2\", \"assets/pompom2.png\");\n        this.load.image(\"pompom3\", \"assets/pompom3.png\");\n        this.load.image(\"pompom4\", \"assets/pompom4.png\");\n        this.load.image(\"pompom5\", \"assets/pompom5.png\");\n        this.load.image(\"pompom6\", \"assets/pompom6.png\");\n    }\n    printSceneInfo() {\n        console.log(\"is sleeping \" + this.scene.isSleeping());\n        console.log(\"is paused \" + this.scene.isPaused());\n        console.log(\"is visible \" + this.scene.isVisible());\n        console.log(\"is active \" + this.scene.isActive());\n    }\n    create(data) {\n        this.score = 0;\n        this.updateScore();\n        this.index = 0;\n        var config = {\n            key: 'walk',\n            frames: this.anims.generateFrameNumbers('player', config),\n            frameRate: 10,\n            yoyo: true,\n            repeat: -1\n        };\n        this.anims.create(config);\n        this.player = this.physics.add.sprite(gameOptions.playerStartPosition, +this.game.config.height / 2, \"player\");\n        this.player.setGravityY(gameOptions.playerGravity);\n        this.player.anims.load('walk');\n        this.player.anims.play('walk');\n        switch (data) {\n            case \"desserts\":\n                gameOptions.chosenObjects = gameOptions.map.desserts;\n                gameOptions.otherObjects = gameOptions.objects.filter(o => gameOptions.chosenObjects.indexOf(o) == -1);\n                break;\n            case \"sports\":\n                gameOptions.chosenObjects = gameOptions.map.sports;\n                gameOptions.otherObjects = gameOptions.objects.filter(o => gameOptions.chosenObjects.indexOf(o) == -1);\n                break;\n            case \"cheerleading\":\n                gameOptions.chosenObjects = gameOptions.map.cheerleading;\n                gameOptions.otherObjects = gameOptions.objects.filter(o => gameOptions.chosenObjects.indexOf(o) == -1);\n                break;\n        }\n        console.log(data);\n        this.createButtons();\n        this.platformGroup = this.add.group({\n            removeCallback: platform => this.platformPool.add(platform)\n        });\n        this.platformPool = this.add.group({\n            removeCallback: platform => this.platformGroup.add(platform)\n        });\n        this.chosenObjectGroup = this.add.group({\n            removeCallback: chosenObject => this.chosenObjectGroup.add(chosenObject)\n        });\n        this.chosenObjectPool = this.add.group({\n            removeCallback: chosenObject => this.chosenObjectGroup.add(chosenObject)\n        });\n        this.otherObjectGroup = this.add.group({\n            removeCallback: otherObject => this.otherObjectGroup.add(otherObject)\n        });\n        this.otherObjectPool = this.add.group({\n            removeCallback: otherObject => this.otherObjectGroup.add(otherObject)\n        });\n        // adding a platform to the game, the arguments are platform width and x position\n        this.addPlatform(+this.game.config.width, +this.game.config.width / 2);\n        // adding a chosenObject or otherObject to the game at random\n        Math.random() > .5 ? this.addOtherObject(100, (+this.game.config.width * 2) / 3) : this.addChosenObject(100, (+this.game.config.width * 2) / 3);\n        // adding a chosenObject collider so chosenObject disappears upon collision with player\n        this.physics.add.collider(this.player, this.chosenObjectGroup, (player, chosenObject) => {\n            chosenObject.destroy();\n            this.score++;\n            this.updateScore();\n        });\n        this.physics.add.collider(this.player, this.otherObjectGroup, (player, otherObject) => {\n            otherObject.destroy();\n        });\n        // setting collisions between the player and the platform group\n        this.physics.add.collider(this.player, this.platformGroup);\n        document.addEventListener(\"keydown\", e => {\n            if (e.key == \" \" || e.key == \"Enter\" || e.key == \"ArrowLeft\" || e.key == \"ArrowRight\") {\n                if (e.key == \"Enter\" || e.key == \"ArrowRight\") {\n                    this.dealWithInput(\"ArrowRight\");\n                }\n                else {\n                    this.dealWithInput(\"ArrowLeft\");\n                }\n            }\n        });\n        document\n            .getElementById(\"left\")\n            .addEventListener(\"click\", e => this.dealWithInput(\"ArrowLeft\"));\n        document\n            .getElementById(\"right\")\n            .addEventListener(\"click\", e => this.dealWithInput(\"ArrowRight\"));\n    }\n    getRandomElement(items) {\n        return items[Math.floor(Math.random() * items.length)];\n    }\n    createButtons() {\n        var selectedStyle = {\n            font: \"128px Arial Bold\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            fill: \"#99badd\",\n            backgroundColor: \"#FFFF33\"\n        };\n        var style = {\n            font: \"128px Arial Bold\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            fill: \"#99badd\",\n            backgroundColor: \"#fff\"\n        };\n        this.jumpButton = this.add.text(300, 350, \"Jump\", selectedStyle);\n        this.jumpButton.setVisible(false);\n        this.runButton = this.add.text(700, 350, \"Run\", style);\n        this.runButton.setVisible(false);\n    }\n    updateScore() {\n        var scoreBoardStyle = {\n            font: \"128px Arial Bold\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            fill: \"#99badd\",\n            backgroundColor: \"#fff\"\n        };\n        this.scoreBoard = this.add.text(500, 0, \"Score: \" + this.score, scoreBoardStyle);\n    }\n    dealWithInput(key) {\n        this.printSceneInfo();\n        console.log(this.index);\n        if (this.scene.isPaused(\"GameScene\")) {\n            if (key == \"ArrowRight\") {\n                if (this.index % 2 == 0) {\n                    this.resumeGameAndJump();\n                }\n                else {\n                    this.resumeGameAndRun();\n                }\n            }\n            else {\n                this.dealWithButtons();\n            }\n        }\n    }\n    dealWithButtons() {\n        console.log(\"dealing with buttons \" + this.index);\n        if (this.index % 2 == 1) {\n            this.jumpButton.setBackgroundColor(\"#FFFF33\");\n            this.runButton.setBackgroundColor(\"#fff\");\n        }\n        else {\n            this.runButton.setBackgroundColor(\"#FFFF33\");\n            this.jumpButton.setBackgroundColor(\"#fff\");\n        }\n        this.index++;\n    }\n    resumeGameAndJump() {\n        this.scene.resume(\"GameScene\");\n        this.jump();\n        this.jumpButton.setVisible(false);\n        this.runButton.setVisible(false);\n    }\n    resumeGameAndRun() {\n        this.scene.resume(\"GameScene\");\n        this.jumpButton.setVisible(false);\n        this.runButton.setVisible(false);\n    }\n    playerNearObject(object) {\n        return object.x - 200 > 0 && object.x - 200 < 2;\n    }\n    // the core of the script: platform are added from the pool or created on the fly\n    addPlatform(platformWidth, posX) {\n        let platform;\n        if (this.platformPool.getLength()) {\n            platform = this.platformPool.getFirst();\n            platform.x = posX;\n            platform.active = true;\n            platform.visible = true;\n            this.platformPool.remove(platform);\n        }\n        else {\n            platform = this.physics.add.sprite(posX, +this.game.config.height * 0.8, \"platform\");\n            platform.setImmovable(true);\n            platform.setVelocityX(gameOptions.platformStartSpeed * -1);\n            this.platformGroup.add(platform);\n        }\n        platform.displayWidth = platformWidth;\n        this.nextPlatformDistance = Phaser.Math.Between(gameOptions.spawnRange[0], gameOptions.spawnRange[1]);\n    }\n    addChosenObject(chosenObjectSize, posX) {\n        let chosenObject;\n        if (this.chosenObjectPool.getLength()) {\n            chosenObject = this.chosenObjectPool.getFirst();\n            chosenObject.x = posX;\n            chosenObject.active = true;\n            chosenObject.visible = true;\n            this.chosenObjectPool.remove(chosenObject);\n        }\n        else {\n            chosenObject = this.physics.add.sprite(posX, +this.game.config.height / 2, this.getRandomElement(gameOptions.chosenObjects));\n            chosenObject.setImmovable(true);\n            chosenObject.setVelocityX(gameOptions.platformStartSpeed * -0.5);\n            this.chosenObjectGroup.add(chosenObject);\n        }\n        chosenObject.displayWidth = chosenObjectSize;\n        chosenObject.displayHeight = chosenObjectSize;\n    }\n    addOtherObject(otherObjectSize, posX) {\n        let otherObject;\n        if (this.otherObjectPool.getLength()) {\n            otherObject = this.otherObjectPool.getFirst();\n            otherObject.x = posX;\n            otherObject.active = true;\n            otherObject.visible = true;\n            this.otherObjectPool.remove(otherObject);\n        }\n        else {\n            otherObject = this.physics.add.sprite(posX, +this.game.config.height / 2, this.getRandomElement(gameOptions.otherObjects));\n            otherObject.setImmovable(true);\n            otherObject.setVelocityX(gameOptions.platformStartSpeed * -0.5);\n            this.otherObjectGroup.add(otherObject);\n        }\n        otherObject.displayWidth = otherObjectSize;\n        otherObject.displayHeight = otherObjectSize;\n    }\n    jump() {\n        if (this.player.body.touching.down ||\n            (this.playerJumps > 0 && this.playerJumps < gameOptions.jumps)) {\n            if (this.player.body.touching.down) {\n                this.playerJumps = 2;\n            }\n            this.player.setVelocityY(gameOptions.jumpForce * -1 * 2);\n            this.playerJumps++;\n        }\n    }\n    update() {\n        this.player.x = gameOptions.playerStartPosition;\n        // recycling chosenObjects\n        let minDistance = +this.game.config.width;\n        this.chosenObjectGroup\n            .getChildren()\n            .forEach(function (chosenObject) {\n            let chosenObjectDistance = +this.game.config.width - chosenObject.x - chosenObject.displayWidth / 2;\n            minDistance = Math.min(minDistance, chosenObjectDistance);\n            if (this.playerNearObject(chosenObject)) {\n                this.jumpButton.setVisible(true);\n                this.runButton.setVisible(true);\n                this.scene.pause(\"GameScene\");\n            }\n        }, this);\n        this.otherObjectGroup\n            .getChildren()\n            .forEach(function (otherObject) {\n            let otherObjectDistance = +this.game.config.width - otherObject.x - otherObject.displayWidth / 2;\n            minDistance = Math.min(minDistance, otherObjectDistance);\n            if (this.playerNearObject(otherObject)) {\n                console.log(otherObject);\n                this.jumpButton.setVisible(true);\n                this.runButton.setVisible(true);\n                this.scene.pause(\"GameScene\");\n            }\n        }, this);\n        let chosen = Math.random() > .5;\n        if (chosen) {\n            //adding new chosenObjects\n            if (minDistance > this.nextPlatformDistance) {\n                var nextChosenObjectWidth = Phaser.Math.Between(gameOptions.platformSizeRange[0], gameOptions.platformSizeRange[1]);\n                this.addChosenObject(+nextChosenObjectWidth, +this.game.config.width + +this.game.config.width / 2);\n            }\n        }\n        else {\n            //adding new otherObjects\n            if (minDistance > this.nextPlatformDistance) {\n                var nextOtherObjectWidth = Phaser.Math.Between(gameOptions.platformSizeRange[0], gameOptions.platformSizeRange[1]);\n                this.addOtherObject(+nextOtherObjectWidth, +this.game.config.width + +this.game.config.width / 2);\n            }\n        }\n        //adding a platform\n        this.addPlatform(+this.game.config.width, +this.game.config.width + +this.game.config.width / 2);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/gameScene.ts?");

/***/ }),

/***/ "./src/gameplayChoiceScene.ts":
/*!************************************!*\
  !*** ./src/gameplayChoiceScene.ts ***!
  \************************************/
/*! exports provided: GameplayChoiceScene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GameplayChoiceScene\", function() { return GameplayChoiceScene; });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n\nclass GameplayChoiceScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: \"GameplayChoiceScene\"\n        });\n    }\n    create(data) {\n        var style = {\n            font: \"128px Arial Bold\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            fill: \"#99badd\",\n            backgroundColor: \"#FFFF33\"\n        };\n        this.noFailButton = this.add.text(150, 70, \"No Fail\", style);\n        var selectedStyle = {\n            font: \"128px Arial Bold\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            fill: \"#99badd\",\n            backgroundColor: \"#fff\"\n        };\n        this.choiceButton = this.add.text(600, 70, \"Choice\", selectedStyle);\n        var titleText = \"Game\";\n        this.title = this.add.text(150, 200, titleText, {\n            font: \"128px Arial Bold\",\n            fill: \"#fff\"\n        });\n        var hintText = \"Press enter to start or space to select a gameplay type\";\n        this.hint = this.add.text(300, 350, hintText, {\n            font: \"24px Arial Bold\",\n            fill: \"#fff\"\n        });\n        let index = 0;\n        this.input.keyboard.on(\"keyup_SPACE\", function ( /*pointer*/) {\n            if (index % 2 == 0) {\n                this.noFailButton.setBackgroundColor(\"#fff\");\n                this.choiceButton.setBackgroundColor(\"#FFFF33\");\n            }\n            else {\n                this.choiceButton.setBackgroundColor(\"#fff\");\n                this.noFailButton.setBackgroundColor(\"#FFFF33\");\n            }\n            index++;\n        }, this);\n        this.input.keyboard.on(\"keyup_ENTER\", function ( /*pointer*/) {\n            if (index % 2 == 0) {\n                // no fail game selected\n                this.scene.start(\"GameNoFailScene\", data);\n                console.log(data);\n            }\n            else {\n                // choice game selected\n                this.scene.start(\"GameScene\", data);\n            }\n        }, this);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/gameplayChoiceScene.ts?");

/***/ }),

/***/ "./src/objectChoiceScene.ts":
/*!**********************************!*\
  !*** ./src/objectChoiceScene.ts ***!
  \**********************************/
/*! exports provided: ObjectChoiceScene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObjectChoiceScene\", function() { return ObjectChoiceScene; });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n\nclass ObjectChoiceScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: \"ObjectChoiceScene\"\n        });\n    }\n    preload() {\n        this.load.image(\"sports\", \"assets/sports.png\");\n        this.load.image(\"desserts\", \"assets/desserts.png\");\n        this.load.image(\"cheerleading\", \"assets/cheerleading.jpg\");\n    }\n    create() {\n        var style = {\n            font: \"120px Arial Bold\",\n            fill: \"#FFFF33\",\n            boundsAlignH: \"center\",\n            boundsAlignV: \"middle\",\n            backgroundColor: \"#FFFF33\"\n        };\n        this.desserts = this.physics.add.sprite(300, 200, \"desserts\");\n        this.frame = this.add.text(this.desserts.x - 50, this.desserts.y - 50, \"fdf\", style);\n        this.frame.setVisible(true);\n        this.frame.setAlpha(.3);\n        this.sports = this.physics.add.sprite(600, 200, \"sports\");\n        this.cheerleading = this.physics.add.sprite(900, 200, \"cheerleading\");\n        var hintText = \"Press space to select your target object or press enter to choose gameplay type\";\n        this.hint = this.add.text(150, 0, hintText, {\n            font: \"24px Arial Bold\",\n            fill: \"#fff\"\n        });\n        let index = 0;\n        this.input.keyboard.on(\"keyup_SPACE\", function ( /*pointer*/) {\n            console.log(index % 3);\n            this.frame.destroy();\n            if (index % 3 == 0) {\n                this.frame = this.add.text(this.desserts.x - 50, this.desserts.y - 50, \"fdf\", style).setAlpha(.3);\n                console.log(\"desserts\");\n            }\n            else if (index % 3 == 1) {\n                this.frame = this.add.text(this.sports.x - 50, this.sports.y - 50, \"fdf\", style).setAlpha(.3);\n                console.log(\"sports\");\n            }\n            else if (index % 3 == 2) {\n                this.frame = this.add.text(this.cheerleading.x - 50, this.cheerleading.y - 50, \"fdf\", style).setAlpha(.3);\n                console.log(\"cheer\");\n            }\n            index++;\n        }, this);\n        this.input.keyboard.on(\"keyup_ENTER\", function ( /*pointer*/) {\n            if (this.desserts.x - 50 == this.frame.x) {\n                this.scene.start(\"GameplayChoiceScene\", \"desserts\");\n            }\n            else if (this.sports.x - 50 == this.frame.x) {\n                this.scene.start(\"GameplayChoiceScene\", \"sports\");\n            }\n            else if (this.cheerleading.x - 50 == this.frame.x) {\n                this.scene.start(\"GameplayChoiceScene\", \"cheerleading\");\n            }\n        }, this);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/objectChoiceScene.ts?");

/***/ }),

/***/ "./src/scoreScene.ts":
/*!***************************!*\
  !*** ./src/scoreScene.ts ***!
  \***************************/
/*! exports provided: ScoreScene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScoreScene\", function() { return ScoreScene; });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n\nclass ScoreScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: \"ScoreScene\"\n        });\n    }\n    init(params) {\n        this.score = params.score;\n    }\n    create() {\n        var resultText = 'Your score is ' + this.score + '!';\n        this.result = this.add.text(200, 250, resultText, { font: '48px Arial Bold', fill: '#FBFBAC' });\n        var hintText = \"Up arrow to restart\";\n        this.hint = this.add.text(300, 350, hintText, { font: '24px Arial Bold', fill: '#FBFBAC' });\n        this.input.keyboard.on('keyup_UP', function ( /*pointer*/) {\n            this.scene.start(\"GameScene\");\n        }, this);\n    }\n}\n;\n\n\n//# sourceURL=webpack:///./src/scoreScene.ts?");

/***/ }),

/***/ "./src/settings.ts":
/*!*************************!*\
  !*** ./src/settings.ts ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst key = 'space-config';\nconst version = 1;\nclass Settings {\n    constructor() {\n        this.mode = 'auto';\n    }\n    persist() {\n        const data = { mode: this.mode, version: version };\n        const json = JSON.stringify(data);\n        localStorage.setItem(key, json);\n    }\n    restore() {\n        const json = localStorage.getItem(key);\n        if (json) {\n            const data = JSON.parse(json);\n            if (data.version == version) {\n                this.mode = data.mode;\n            }\n        }\n    }\n}\nconst settings = new Settings();\nsettings.restore();\n/* harmony default export */ __webpack_exports__[\"default\"] = (settings);\n\n\n//# sourceURL=webpack:///./src/settings.ts?");

/***/ }),

/***/ "phaser":
/*!*************************!*\
  !*** external "Phaser" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = Phaser;\n\n//# sourceURL=webpack:///external_%22Phaser%22?");

/***/ })

/******/ });